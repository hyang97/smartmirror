<!--
  TODO: render a page that greets the user and prompts them for audio input
-->
<!DOCTYPE html>
<html>
  <head>
    <title>Smart Mirror</title>
    <link rel="stylesheet" href="/stylesheets/style.css" />

  </head>
  <body>
    <h1>Smart Mirror</h1>
    <p><%= title %></p>

    <!--Add buttons to initiate auth sequence and sign out-->
    <button id="authorize_button" style="display: none;">Authorize</button>
    <button id="signout_button" style="position: absolute; bottom: 0; right: 0;">Sign Out</button>

    <script type="text/javascript" src="jquery-1.8.3.js"></script>
    
    <script type="text/javascript">
      // Client ID and API key from the Developer Console
      var CLIENT_ID = '228933662463-mtop5u5td15b5g273a3o27sufraefmom.apps.googleusercontent.com';
      var API_KEY = 'AIzaSyB6zlh9J_Ply2fFvJJjrT-yBtaU_rJLHSk';

      // Array of API discovery doc URLs for APIs used by the quickstart
      var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      var SCOPES = "https://www.googleapis.com/auth/calendar.readonly";

      var authorizeButton = document.getElementById('authorize_button');
      var signoutButton = document.getElementById('signout_button');

      /**
       *  On load, called to load the auth2 library and API client library.
       */
      function handleClientLoad() {
        gapi.load('client:auth2', initClient);
      }

      /**
       *  Initializes the API client library and sets up sign-in state
       *  listeners.
       */
      function initClient() {
        gapi.client.init({
          apiKey: API_KEY,
          clientId: CLIENT_ID,
          discoveryDocs: DISCOVERY_DOCS,
          scope: SCOPES
        }).then(function () {
          // Listen for sign-in state changes.
          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

          // Handle the initial sign-in state.
          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
          authorizeButton.onclick = handleAuthClick;
          signoutButton.onclick = handleSignoutClick;
        }, function(error) {
          appendPre(JSON.stringify(error, null, 2));
        });
      }

      /**
       *  Called when the signed in status changes, to update the UI
       *  appropriately. After a sign-in, the API is called.
       */
      function updateSigninStatus(isSignedIn) {
        if (isSignedIn) {
          authorizeButton.style.display = 'none';
          signoutButton.style.display = 'block';
          listUpcomingEvents();
        } else {
          authorizeButton.style.display = 'block';
          signoutButton.style.display = 'none';
        }
      }

      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick(event) {
        gapi.auth2.getAuthInstance().signIn();
      }

      /**
       *  Sign out the user upon button click.
       */
      function handleSignoutClick(event) {
        gapi.auth2.getAuthInstance().signOut();
      }

      /*  Save event information to local storage
          for render in calendar.ejs
      */
      function listUpcomingEvents() {
        // Get start of day 
        var start = new Date(); 
        start.setHours(0, 0, 0, 0);

        // Get end of day
        var end = new Date();
        end.setHours(23, 59, 59, 999);

        gapi.client.calendar.events.list({
          'calendarId': 'primary',
          'timeMin': start.toISOString(),
          'timeMax': end.toISOString(),
          'showDeleted': false,
          'singleEvents': true,
          'maxResults': 3,
          'orderBy': 'startTime'
        }).then(function(response) {
          var events = response.result.items;
          localStorage.setItem('events', JSON.stringify(events));
        });
      }
    </script>

    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
  </body>

  <script>
    var ws = new WebSocket("ws://localhost:40510");
    // event emmited when connected
    ws.onopen = function() {
      console.log("websocket is connected ...");
      // sending a send event to websocket server
      ws.send("connected");
    };
    ws.onmessage = function(ev) {
      console.log(ev.data);
      const path = ev.data;
      window.location.href = "/" + path;
    };
  </script>
</html>
